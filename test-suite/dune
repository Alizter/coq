(rule
 (alias test-gen)
 (targets test_suite_rules.sexp)
 (deps
  (source_tree bugs)
  ; (source_tree complexity)
  (source_tree coq-makefile)
  (source_tree coqchk)
  (source_tree coqdoc)
  (source_tree coqwc)
  (source_tree failure)
  (source_tree ide)
  (source_tree interactive)
  (source_tree ltac2)
  (source_tree micromega)
  (source_tree misc)
  (source_tree modules)
  (source_tree output)
  (source_tree output-coqchk)
  (source_tree output-coqtop)
  (source_tree output-failure)
  ; (source_tree output-modulo-time)
  (source_tree prerequisite)
  (source_tree primitive)
  (source_tree ssr)
  (source_tree stm)
  (source_tree success)
  (source_tree tools)
  (source_tree vio)


  ; We rely on coqdeplib
  (source_tree ../tools/coqdep)
  (source_tree ../theories)
  (source_tree ../user-contrib)

  (file ../theories/Init/Prelude.vo)

  ; These are needed for test-suite/tools/update-compat/run.sh
  ../dev/tools/update-compat.py
  ../dev/header.ml
  ../doc/stdlib/index-list.html.template

  %{bin:coqc}
  %{bin:coqtop}
  %{bin:coqtop.byte}
  %{bin:coqdoc}
  %{bin:coqtacticworker.opt}
  %{bin:coqqueryworker.opt}
  %{bin:coqproofworker.opt}
  %{bin:coq_makefile}
  %{bin:fake_ide}
  %{bin:coqchk}
  %{bin:coqidetop.byte}
  %{lib:coq-core.vm:../../stublibs/dllcoqrun_stubs.so}
  %{lib:coq-core.plugins.number_string_notation:number_string_notation_plugin.cmxs}
  %{lib:coq-core.plugins.tauto:tauto_plugin.cmxs}
  %{lib:coq-core.plugins.cc:cc_plugin.cmxs}
  %{lib:coq-core.plugins.firstorder:firstorder_plugin.cmxs}
  %{lib:coq-core.plugins.ltac:ltac_plugin.cmxs}

  )
 (mode promote)
 (action (run ./tools/gen_rules/gen_rules.exe)))

(env (_
 (binaries (ide/fake_ide.exe as fake_ide))))

(include test_suite_rules.sexp)

; the expected output for the MExtraction test is plugins/micromega/micromega.ml
; except with additional newline
(subdir output
 (rule
  (targets MExtraction.out)
  (action
   (with-stdout-to %{targets}
    (progn
     (cat ../../plugins/micromega/micromega.ml)
     (echo "\n"))))))
